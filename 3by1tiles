{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a081064c-42d6-43b3-9a43-8ef0e198b9d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "import matplotlib.pyplot as plt\n",
    "import copy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f27ca4a-a269-4627-9823-a4ce22a7fc21",
   "metadata": {},
   "source": [
    "### UNDERLYING EDGES FOR THE GRAPH"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f1fa4ffa-c78e-416e-97cd-48f8b0ea1813",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "GMAIN = nx.DiGraph()\n",
    "possibleLables = [\"e1\",\"e2\",\"e3\"]\n",
    "\n",
    "rows=4\n",
    "cols=6\n",
    "for i in range(rows):\n",
    "    for j in range(cols):\n",
    "        node = (i, j)\n",
    "        GMAIN.add_node(node)\n",
    "\n",
    "for i in range(rows):\n",
    "    for j in range(cols): \n",
    "        node = (i,j)\n",
    "        if (j!=5):\n",
    "            neighbor = (i,j+1)\n",
    "            GMAIN.add_edge(node,neighbor)\n",
    "            if i%3 == 0:\n",
    "                GMAIN[node][neighbor]['label'] = possibleLables[(3+j)%3]\n",
    "            if i%3 == 1:\n",
    "                GMAIN[node][neighbor]['label'] = possibleLables[(2+j)%3]\n",
    "            if i%3 == 2:\n",
    "                GMAIN[node][neighbor]['label'] = possibleLables[(1+j)%3]\n",
    "        if i != 3:\n",
    "            neighbor = (i+1,j)\n",
    "            GMAIN.add_edge(neighbor,node)\n",
    "            if j%3 == 0:\n",
    "                GMAIN[neighbor][node]['label'] = possibleLables[(3-i)%3]\n",
    "            if j%3 == 1:\n",
    "                GMAIN[neighbor][node]['label'] = possibleLables[(1-i)%3]\n",
    "            if j%3 == 2:\n",
    "                GMAIN[neighbor][node]['label'] = possibleLables[(2-i)%3]\n",
    "\n",
    "edge_labels = {(u, v): GMAIN[u][v]['label'] for u, v in GMAIN.edges()}\n",
    "                \n",
    "pos = {(i, j): (j, -i) for i in range(rows) for j in range(cols)}  # Invert y for proper orientation\n",
    "nx.draw(GMAIN, pos, with_labels=False, node_size=100, node_color=\"lightgray\", edge_color=\"black\", arrows=True)\n",
    "nx.draw_networkx_edge_labels(GMAIN, pos, edge_labels=edge_labels, font_size=10)\n",
    "plt.show()     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "f0f704dc-418d-478a-be09-b6c500861f72",
   "metadata": {},
   "outputs": [],
   "source": [
    "def printArr(arr):\n",
    "    for row in arr:\n",
    "        print(row)\n",
    "\n",
    "def flipVertToHor(tlRow,tlCol,arr): #tl for top left\n",
    "    newArr = [copy.deepcopy(row) for row in arr]\n",
    "    print(f\"Original Array:\")\n",
    "    printArr(arr)\n",
    "    for i in range(flipSize):\n",
    "        newArr[tlRow+i][tlCol] = l\n",
    "        newArr[tlRow+i][tlCol+1] = c\n",
    "        newArr[tlRow+i][tlCol+2] = r\n",
    "    print(f\"New Array:\")\n",
    "    printArr(newArr)\n",
    "    return newArr\n",
    "\n",
    "def flipHorToVert(tlRow,tlCol,arr): #tl for top left\n",
    "    newArr = [copy.deepcopy(row) for row in arr]\n",
    "    print(f\"Original Array:\")\n",
    "    printArr(arr)\n",
    "    for i in range(flipSize):\n",
    "        newArr[tlRow][tlCol+i] = t\n",
    "        newArr[tlRow+1][tlCol+i] = m\n",
    "        newArr[tlRow+2][tlCol+i] = b\n",
    "    print(f\"New Array:\")\n",
    "    printArr(newArr)\n",
    "    return newArr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b9a1795e-cf88-44af-866d-3922cad5ec74",
   "metadata": {},
   "outputs": [],
   "source": [
    "def showGraph(G,rows,cols):\n",
    "    pos = {(i, j): (j, -i) for i in range(rows) for j in range(cols)}  # Invert y for proper orientation\n",
    "    nx.draw(G, pos, with_labels=False, node_size=100, node_color=\"lightgray\", edge_color=\"black\", arrows=True)\n",
    "    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels, font_size=10)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "f338f6a3-70ed-45db-b33e-728e42cf63c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def createNodes(G,arr):\n",
    "    for i in range(len(arr)+1):\n",
    "        for j in range(len(arr[0])+1):\n",
    "            node = (i, j)\n",
    "            G.add_node(node)\n",
    "    return G\n",
    "\n",
    "def createEdges(G,arr,refGraph):\n",
    "    printArr(arr)\n",
    "    t = \"  top \"\n",
    "    for i in range(len(arr)):\n",
    "        for j in range(len(arr[0])):\n",
    "            node = (i,j)\n",
    "            # add an edge going right\n",
    "            if arr[i][j] == t or arr[i][j] == l or arr[i][j] == c or arr[i][j] == r:\n",
    "                neighbor = (i,j+1)\n",
    "                G.add_edge(node,neighbor)\n",
    "                G[node][neighbor]['label'] = refGraph[node][neighbor]['label']\n",
    "            # add an edge going from below to current\n",
    "            if arr[i][j] == t or arr[i][j] == l or arr[i][j] == m or arr[i][j] == b:\n",
    "                neighbor = (i+1,j)\n",
    "                G.add_edge(neighbor,node)\n",
    "                G[neighbor][node]['label'] = refGraph[neighbor][node]['label']\n",
    "\n",
    "            # account for bottom and right\n",
    "            if i == len(arr) - 1:\n",
    "                node = (i+1,j)\n",
    "                neighbor = (i+1,j+1)\n",
    "                G.add_edge(node,neighbor)\n",
    "                G[node][neighbor]['label'] = refGraph[node][neighbor]['label']\n",
    "            if j == len(arr[0]) - 1:\n",
    "                node = (i,j+1)\n",
    "                neighbor = (i+1,j+1)\n",
    "                G.add_edge(neighbor,node)\n",
    "                G[neighbor][node]['label'] = refGraph[neighbor][node]['label']      \n",
    "    return G"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "e9cdb333-5292-4c7b-beab-7ba783b1213e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def createTilingWeigthedEdges(tilingGraph,GMAIN):\n",
    "    toReturn = copy.deepcopy(GMAIN)\n",
    "    for u, v in list(toReturn.edges):  \n",
    "        if not tilingGraph.has_edge(u, v):  \n",
    "            toReturn.remove_edge(u, v)\n",
    "    return toReturn"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a0a1dc40-ac7f-490d-871f-792921be995a",
   "metadata": {},
   "source": [
    "### HEIGHT FUNCTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "661da727-4f59-4444-aabb-36eb79f1472c",
   "metadata": {},
   "outputs": [],
   "source": [
    "def createHeightArray(rows,cols,Gr):\n",
    "    heights = [[None] * cols for _ in range(rows)]\n",
    "    # create outer boundary\n",
    "    heights[rows-1][0] = (0,0)\n",
    "    start_node = (rows-1, 0)\n",
    "    queue = [start_node]\n",
    "    \n",
    "    while queue:\n",
    "        node = queue.pop(0)\n",
    "        x, y = node\n",
    "        current_height = heights[x][y]\n",
    "    \n",
    "        for neighbor in Gr.neighbors(node):\n",
    "            if heights[neighbor[0]][neighbor[1]] is None and (Gr.has_edge(node, neighbor)):  # If not visited\n",
    "                edge_label = Gr[node][neighbor]['label']\n",
    "    \n",
    "                if edge_label == 'e1':\n",
    "                    new_height = (current_height[0] + 1, current_height[1])\n",
    "                elif edge_label == 'e2':\n",
    "                    new_height = (current_height[0], current_height[1] + 1)\n",
    "                elif edge_label == 'e3':\n",
    "                    new_height = (current_height[0] - 1, current_height[1] - 1)\n",
    "                \n",
    "                heights[neighbor[0]][neighbor[1]] = new_height\n",
    "                queue.append(neighbor)\n",
    "    return heights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f0cd9144-cbba-4ca8-88c9-e0b62afe65e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# vert tiles\n",
    "t = \"  top \"\n",
    "m = \"middle\" # for vertical tiles\n",
    "b = \"bottom\"\n",
    "#horizontal tiles\n",
    "l = \" left \"\n",
    "c = \"center\" # for horizontal tiles\n",
    "r = \" right\"\n",
    "arrAllVert = [[t,t,t,t,t],[m,m,m,m,m],[b,b,b,b,b]]\n",
    "flipSize = 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a712f36-f2e0-4eef-bb0b-06c9b79e852e",
   "metadata": {},
   "source": [
    "# Helper Functions: \n",
    "- printArr(arr)\n",
    "- flipVertToHor(tlRow,tlCol,arr) --> arr\n",
    "- flipHorToVert(tlRow,tlCol,arr) --> arr\n",
    "- showGraph(G,rows,cols) \n",
    "- createNodes(G,arr) --> Graph\n",
    "- createEdges(G,arr) --> Graph\n",
    "- createTilingWeigthedEdges(tilingGraph,GMAIN) --> Graph\n",
    "- createHeightArray(rows,cols,Gr) --> arr"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b6aa341-d803-4f5d-8c10-0927de8d514c",
   "metadata": {},
   "source": [
    "## DONE W HELPER FUNCTIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a497ffe-298b-49a1-94f8-dbae93013e36",
   "metadata": {},
   "outputs": [],
   "source": [
    "allVertsGraph = nx.DiGraph()\n",
    "allVertsGraph = createNodes(allVertsGraph,arrAllVert)\n",
    "allVertsGraph = createEdges(allVertsGraph,arrAllVert)\n",
    "rows = 4\n",
    "cols = 6\n",
    "pos = {(i, j): (j, -i) for i in range(rows) for j in range(cols)}  # Invert y for proper orientation\n",
    "nx.draw(allVertsGraph, pos, with_labels=True, node_size=500, node_color=\"lightgray\", edge_color=\"black\", arrows=True)\n",
    "edge_labels = {(u, v): GMAIN[u][v]['label'] for u, v in allVertsGraph.edges()}\n",
    "nx.draw_networkx_edge_labels(allVertsGraph, pos, edge_labels=edge_labels, font_size=10)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3326992-5703-49f9-90a1-7e34f0739f9b",
   "metadata": {},
   "source": [
    "# ALL VERTICAL HEIGHTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5de1a96e-6f1e-42ec-86f9-5995ca5b83ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I dont think i need this!!\n",
    "\n",
    "# allVertical = createTilingWeigthedEdges(allVertsGraph,GMAIN)\n",
    "# nx.draw(allVertical, pos, with_labels=True, node_size=500, node_color=\"lightgray\", edge_color=\"black\", arrows=True)\n",
    "# nx.draw_networkx_edge_labels(allVertical, pos, edge_labels, font_size=10)\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d85a5b38-bba1-4ce7-8be6-36e31199f5d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create heights array\n",
    "heightsAllVerts = [[None] * 6 for _ in range(4)]\n",
    "# create outer boundary\n",
    "rows = 4\n",
    "cols = 6\n",
    "heightsAllVerts[rows-1][0] = (0,0)\n",
    "start_node = (3, 0)\n",
    "queue = [start_node]\n",
    "\n",
    "pos = { (i, j): (j, -i) for i, j in allVertsGraph.nodes() }  # Grid layout\n",
    "nx.draw(allVertsGraph, pos, with_labels=True, node_color='lightgray', edge_color='black', node_size=1500, font_size=10)\n",
    "nx.draw_networkx_edge_labels(allVertsGraph, pos, edge_labels, font_size=10)\n",
    "plt.show()\n",
    "\n",
    "while queue:\n",
    "    node = queue.pop(0)\n",
    "    x, y = node\n",
    "    current_height = heightsAllVerts[x][y]\n",
    "\n",
    "    for neighbor in allVertsGraph.neighbors(node):\n",
    "        if heightsAllVerts[neighbor[0]][neighbor[1]] is None and (allVertsGraph.has_edge(node, neighbor)):  # If not visited\n",
    "            edge_label = allVertsGraph[node][neighbor]['label']\n",
    "            #print(f\"Node: {node} | Neighbor: {neighbor} | Current Height: {current_height}\")\n",
    "            #print(edge_label)\n",
    "            # Update height based on edge type\n",
    "            if edge_label == 'e1':\n",
    "                new_height = (current_height[0] + 1, current_height[1])\n",
    "            elif edge_label == 'e2':\n",
    "                new_height = (current_height[0], current_height[1] + 1)\n",
    "            elif edge_label == 'e3':\n",
    "                new_height = (current_height[0] - 1, current_height[1] - 1)\n",
    "            \n",
    "            heightsAllVerts[neighbor[0]][neighbor[1]] = new_height\n",
    "            queue.append(neighbor)  # Add to queue for traversal\n",
    "    \n",
    "printArr(heightsAllVerts)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "08883a8f-af9f-4268-ae11-07f7d79a79d6",
   "metadata": {},
   "source": [
    "## check with flips!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05910fe3-7a7d-4435-b8ec-ae104585dcef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# array if top left is flipped\n",
    "leftmostFliparr = flipVertToHor(0,0,arrAllVert)\n",
    "print()\n",
    "leftmostFlipGraph = nx.DiGraph()\n",
    "leftmostFlipGraph = createNodes(leftmostFlipGraph,leftmostFliparr)\n",
    "leftmostFlipGraph = createEdges(leftmostFlipGraph,leftmostFliparr)\n",
    "showGraph(leftmostFlipGraph,4,6)\n",
    "lmArr = createHeightArray(4,6,leftmostFlipGraph)\n",
    "printArr(lmArr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1172ffa9-d2b3-458b-ab25-4680c806d31f",
   "metadata": {},
   "outputs": [],
   "source": [
    "middleFliparr = flipVertToHor(0,1,arrAllVert)\n",
    "print()\n",
    "middleFlipGraph = nx.DiGraph()\n",
    "middleFlipGraph = createNodes(middleFlipGraph,middleFliparr)\n",
    "middleFlipGraph = createEdges(middleFlipGraph,middleFliparr)\n",
    "showGraph(middleFlipGraph,4,6)\n",
    "mArr = createHeightArray(4,6,middleFlipGraph)\n",
    "printArr(mArr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00f63b10-3369-4d4d-bc86-4e22d5c71165",
   "metadata": {},
   "outputs": [],
   "source": [
    "rightmostFliparr = flipVertToHor(0,2,arrAllVert)\n",
    "print()\n",
    "rightmostFlipGraph = nx.DiGraph()\n",
    "rightmostFlipGraph = createNodes(rightmostFlipGraph,rightmostFliparr)\n",
    "rightmostFlipGraph = createEdges(rightmostFlipGraph,rightmostFliparr)\n",
    "showGraph(rightmostFlipGraph,4,6)\n",
    "rmArr = createHeightArray(4,6,rightmostFlipGraph)\n",
    "printArr(rmArr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b641518b-e056-4c25-9642-c24e1beeab43",
   "metadata": {},
   "source": [
    "# SHOW HEIGHT FUNCTIONS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf9d53cf-0543-49d6-ae6f-5029804641c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"All Vertical Height Function\")\n",
    "printArr(heightsAllVerts)\n",
    "print(\"Leftmost Flip Height Function\")\n",
    "printArr(lmArr)\n",
    "print(\"Center Flip Height Function\")\n",
    "printArr(mArr)\n",
    "print(\"Rightmost Flip Height Function\")\n",
    "printArr(rmArr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d9f8dba-fec1-4d3e-8a90-8a3fc5c43d28",
   "metadata": {},
   "source": [
    "## find differences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "bf3d3852-d5f1-4504-948b-f65b4e5dac52",
   "metadata": {},
   "outputs": [],
   "source": [
    "def differences(arr1,arr2):\n",
    "    toReturn = [[None] * len(arr1[0]) for _ in range(len(arr1))]\n",
    "    for i in range(len(arr1)):\n",
    "        for j in range(len(arr1[0])):\n",
    "            x = arr2[i][j][0] - arr1[i][j][0]\n",
    "            y = arr2[i][j][1] - arr1[i][j][1]\n",
    "            toReturn[i][j] = (x,y)\n",
    "\n",
    "    return toReturn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1171cd5-4813-4c23-944d-d14a86c48ad9",
   "metadata": {},
   "outputs": [],
   "source": [
    "printArr(differences(heightsAllVerts,rmArr)) # noticed: ALL POSITIVE (when top left of flip was e3s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78a65154-b323-40b6-8376-0b6f96ac9217",
   "metadata": {},
   "outputs": [],
   "source": [
    "printArr(differences(heightsAllVerts,mArr)) # noticed: ALL NEG EXCEPT 1 (when top left of flip was e2s)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60617649-3a21-4e42-aedb-b9a674c837bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "printArr(differences(heightsAllVerts,lmArr)) # noticed: ALL NEG EXCEPT 1 (when top left of flip was e1s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e366b5f-f163-41d5-9839-85f54d5d658f",
   "metadata": {},
   "source": [
    "# BIGGER GRAPH (6X5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "3f443542-4317-4b60-91e4-ccfc561c067a",
   "metadata": {},
   "outputs": [],
   "source": [
    "allVertArrBIG = [[t,t,t,t,t],[m,m,m,m,m],[b,b,b,b,b],[t,t,t,t,t],[m,m,m,m,m],[b,b,b,b,b]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8c33f7b8-5b90-4e3e-b911-57a5ea8a229f",
   "metadata": {},
   "outputs": [],
   "source": [
    "GMAINBIG = nx.DiGraph()\n",
    "possibleLables = [\"e1\",\"e2\",\"e3\"]\n",
    "\n",
    "rows=7\n",
    "cols=6\n",
    "for i in range(rows):\n",
    "    for j in range(cols):\n",
    "        node = (i, j)\n",
    "        GMAINBIG.add_node(node)\n",
    "\n",
    "for i in range(rows):\n",
    "    for j in range(cols): \n",
    "        node = (i,j)\n",
    "        if (j!=cols-1):\n",
    "            neighbor = (i,j+1)\n",
    "            GMAINBIG.add_edge(node,neighbor)\n",
    "            if i%3 == 0:\n",
    "                GMAINBIG[node][neighbor]['label'] = possibleLables[(3+j)%3]\n",
    "            if i%3 == 1:\n",
    "                GMAINBIG[node][neighbor]['label'] = possibleLables[(2+j)%3]\n",
    "            if i%3 == 2:\n",
    "                GMAINBIG[node][neighbor]['label'] = possibleLables[(1+j)%3]\n",
    "        if i != rows-1:\n",
    "            neighbor = (i+1,j)\n",
    "            GMAINBIG.add_edge(neighbor,node)\n",
    "            if j%3 == 0:\n",
    "                GMAINBIG[neighbor][node]['label'] = possibleLables[(3-i)%3]\n",
    "            if j%3 == 1:\n",
    "                GMAINBIG[neighbor][node]['label'] = possibleLables[(1-i)%3]\n",
    "            if j%3 == 2:\n",
    "                GMAINBIG[neighbor][node]['label'] = possibleLables[(2-i)%3]\n",
    "\n",
    "edge_labels = {(u, v): GMAINBIG[u][v]['label'] for u, v in GMAINBIG.edges()}\n",
    "                \n",
    "pos = {(i, j): (j, -i) for i in range(rows) for j in range(cols)}  # Invert y for proper orientation\n",
    "nx.draw(GMAINBIG, pos, with_labels=False, node_size=100, node_color=\"lightgray\", edge_color=\"black\", arrows=True)\n",
    "nx.draw_networkx_edge_labels(GMAINBIG, pos, edge_labels=edge_labels, font_size=10)\n",
    "plt.show()   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83187c1e-e836-45cd-8300-b8ed310508ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "rows = 7\n",
    "cols = 6\n",
    "allVertFlipGraphBIG = nx.DiGraph()\n",
    "allVertFlipGraphBIG = createNodes(allVertFlipGraphBIG,allVertArrBIG)\n",
    "allVertFlipGraphBIG = createEdges(allVertFlipGraphBIG,allVertArrBIG)\n",
    "showGraph(allVertFlipGraphBIG,rows,cols)\n",
    "allVertsHeightsBIG = createHeightArray(rows,cols,allVertFlipGraphBIG)\n",
    "printArr(allVertsHeightsBIG)\n",
    "heightsDict = {}\n",
    "heightsDict[\"allVerticalBIG\"] = allVertsHeightsBIG"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "134a15cc-4d6e-496a-be70-d06398b8f513",
   "metadata": {},
   "outputs": [],
   "source": [
    "flip1 = flipVertToHor(0,1,allVertArrBIG)\n",
    "flip2 = flipVertToHor(3,1,flip1)\n",
    "after2flipsGraph = nx.DiGraph()\n",
    "after2flipsGraph = createNodes(after2flipsGraph,flip2)\n",
    "after2flipsGraph = createEdges(after2flipsGraph,flip2)\n",
    "showGraph(after2flipsGraph,rows,cols)\n",
    "after2flipsHeights = createHeightArray(rows,cols,after2flipsGraph)\n",
    "printArr(after2flipsHeights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb0655ad-37bc-46ee-ae2a-e8c2443d62c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "printArr(differences(allVertsHeightsBIG,after2flipsHeights))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f9d0834b-9b2f-49d0-a6df-cbc419f6c5d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "flip3 = flipHorToVert(1,1,flip2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed612eae-c9ff-46c3-b7d1-e3a52ecf6aad",
   "metadata": {},
   "outputs": [],
   "source": [
    "after3flipsGraph = nx.DiGraph()\n",
    "after3flipsGraph = createNodes(after3flipsGraph,flip3)\n",
    "after3flipsGraph = createEdges(after3flipsGraph,flip3)\n",
    "showGraph(after3flipsGraph,rows,cols)\n",
    "after3flipsHeights = createHeightArray(rows,cols,after3flipsGraph)\n",
    "printArr(after3flipsHeights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ad64228d-b7c2-4a8d-9ea0-3efdc425fe8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "printArr(differences(allVertsHeightsBIG,after3flipsHeights)) # INTERESTING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e093d6c8-d74c-4941-8278-40825126a80d",
   "metadata": {},
   "outputs": [],
   "source": [
    "printArr(differences(after2flipsHeights,after3flipsHeights)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7509b54-ec9b-4ce6-8b12-fa9d77878bda",
   "metadata": {},
   "source": [
    "# MODIFIED MAIN EDGES\n",
    "Realized this doesn't work bc the heights will always be equal after flips!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "241bc9ee-1378-4651-891a-668cc0ab3876",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "GMAINModified = nx.DiGraph()\n",
    "\n",
    "rows=7\n",
    "cols=6\n",
    "for i in range(rows):\n",
    "    for j in range(cols):\n",
    "        node = (i, j)\n",
    "        GMAINModified.add_node(node)\n",
    "\n",
    "for i in range(rows):\n",
    "    for j in range(cols): \n",
    "        node = (i,j)\n",
    "        if (j!=cols-1):\n",
    "            neighbor = (i,j+1)\n",
    "            GMAINModified.add_edge(node,neighbor)\n",
    "            if i%3 == 0:\n",
    "                GMAINModified[node][neighbor]['label'] = possibleLables[(3+j)%3]\n",
    "            if i%3 == 1:\n",
    "                GMAINModified[node][neighbor]['label'] = possibleLables[(2+j)%3]\n",
    "            if i%3 == 2:\n",
    "                GMAINModified[node][neighbor]['label'] = possibleLables[(1+j)%3]\n",
    "        if i != rows-1:\n",
    "            neighbor = (i+1,j)\n",
    "            GMAINModified.add_edge(neighbor,node)\n",
    "            if j%3 == 0:\n",
    "                GMAINModified[neighbor][node]['label'] = possibleLables[(2-i)%3] #possibleLables[(2+i)%3]\n",
    "            if j%3 == 1:\n",
    "                GMAINModified[neighbor][node]['label'] = possibleLables[(3-i)%3]\n",
    "            if j%3 == 2:\n",
    "                GMAINModified[neighbor][node]['label'] = possibleLables[(1-i)%3]\n",
    "\n",
    "edge_labels = {(u, v): GMAINModified[u][v]['label'] for u, v in GMAINModified.edges()}\n",
    "                \n",
    "pos = {(i, j): (j, -i) for i in range(rows) for j in range(cols)}  # Invert y for proper orientation\n",
    "nx.draw(GMAINModified, pos, with_labels=False, node_size=100, node_color=\"lightgray\", edge_color=\"black\", arrows=True)\n",
    "nx.draw_networkx_edge_labels(GMAINModified, pos, edge_labels=edge_labels, font_size=10)\n",
    "plt.show()     "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "d62ee128-b2e4-41db-99df-e31b6475074a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1)]\n",
      "[(1, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0)]\n",
      "[(1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 0)]\n",
      "[(0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1)]\n",
      "[(1, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0)]\n",
      "[(1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 0)]\n",
      "[(0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1)]\n"
     ]
    }
   ],
   "source": [
    "verticalTilesModifiedGraph = nx.DiGraph()\n",
    "verticalTilesModifiedGraph = createNodes(verticalTilesModifiedGraph,allVertArrBIG)\n",
    "verticalTilesModifiedGraph = createEdges(verticalTilesModifiedGraph,allVertArrBIG,GMAINModified)\n",
    "showGraph(verticalTilesModifiedGraph,rows,cols)\n",
    "verticalTilesModifiedHeights = createHeightArray(rows,cols,verticalTilesModifiedGraph)\n",
    "printArr(verticalTilesModifiedHeights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "ffbb3b61-f836-4f07-a637-fadcd55c875d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Array:\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n",
      "New Array:\n",
      "[' left ', 'center', ' right', '  top ', '  top ']\n",
      "[' left ', 'center', ' right', 'middle', 'middle']\n",
      "[' left ', 'center', ' right', 'bottom', 'bottom']\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n"
     ]
    }
   ],
   "source": [
    "f1arr = flipVertToHor(0,0,allVertArrBIG)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a1339b90-1fc8-40da-9c24-6a2a30b44fb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def createGraphAndHeights(rows,cols,arr,refEdgesGraph):\n",
    "    toReturnGraph = nx.DiGraph()\n",
    "    toReturnGraph = createNodes(toReturnGraph,arr)\n",
    "    toReturnGraph = createEdges(toReturnGraph,arr,refEdgesGraph)\n",
    "    showGraph(toReturnGraph,rows,cols)\n",
    "    toReturnHeights = createHeightArray(rows,cols,toReturnGraph)\n",
    "    printArr(toReturnHeights)\n",
    "    return (toReturnGraph,toReturnHeights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a0313498-17cd-4c40-a4eb-b722461c79f0",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original Array:\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n",
      "New Array:\n",
      "[' left ', 'center', ' right', '  top ', '  top ']\n",
      "[' left ', 'center', ' right', 'middle', 'middle']\n",
      "[' left ', 'center', ' right', 'bottom', 'bottom']\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n",
      "[' left ', 'center', ' right', '  top ', '  top ']\n",
      "[' left ', 'center', ' right', 'middle', 'middle']\n",
      "[' left ', 'center', ' right', 'bottom', 'bottom']\n",
      "['  top ', '  top ', '  top ', '  top ', '  top ']\n",
      "['middle', 'middle', 'middle', 'middle', 'middle']\n",
      "['bottom', 'bottom', 'bottom', 'bottom', 'bottom']\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1)]\n",
      "[(1, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0)]\n",
      "[(1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 0)]\n",
      "[(0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1)]\n",
      "[(1, 1), (0, 0), (1, 0), (1, 1), (0, 0), (1, 0)]\n",
      "[(1, 0), (1, 1), (0, 0), (1, 0), (1, 1), (0, 0)]\n",
      "[(0, 0), (1, 0), (1, 1), (0, 0), (1, 0), (1, 1)]\n",
      "Difference between All Vertical Tiles and flipped in Top Left Corner\n",
      "[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n",
      "[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n",
      "[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n",
      "[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n",
      "[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n",
      "[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n",
      "[(0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]\n"
     ]
    }
   ],
   "source": [
    "f1arr = flipVertToHor(0,0,allVertArrBIG)\n",
    "f1d = createGraphAndHeights(rows,cols,f1arr,GMAINModified)\n",
    "print(\"Difference between All Vertical Tiles and flipped in Top Left Corner\")\n",
    "printArr(differences(verticalTilesModifiedHeights,f1d[1]))  # *** NOTE SO IT DOESNT WORK THIS WAY BC THE HEIGHTS WOULD ALWAYS BE THE SAME!! ***"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2f4d1c74-507a-4d68-85cf-63b25b236db4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
